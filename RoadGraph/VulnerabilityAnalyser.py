from shapely.geometry import Point

from GeoDataFrameAux import GeoPolyDataFrameBuilder
from RoadGraph import StdRoadGraph
from RoadGraph.StdColNames import *
import geopandas as gpd
import pandas as pd
from operator import itemgetter

class VulnerabilityAnalyser:

    def __init__(self, road_graph: StdRoadGraph):
        self.graph = road_graph

    def generate_square_grid(self, dimension_km: int) -> gpd.GeoDataFrame:
        """
        Generates a square grid covering the total bounds of the edges of the road graph
        :param dimension_km: Dimension (width and height) of the square
        :return: GeoDataframe object containing the squares that form the grid
        """
        edges = self.graph.edges
        bounds = list(edges.total_bounds)
        minx, miny, maxx, maxy = bounds[0], bounds[1], bounds[2], bounds[3]
        size_m = dimension_km * 1000
        y = miny
        gdf = gpd.GeoDataFrame()

        while y < maxy:
            x = minx
            while x < maxx:
                coordinates = [(x, y), (x, y + size_m), (x + size_m, y + size_m), (x + size_m, y)]
                polygon = GeoPolyDataFrameBuilder().build_geo_frame(coordinates, 'epsg:27700')
                gdf = pd.concat([gdf, polygon])
                x += size_m
            y += size_m

        gdf.reset_index(drop=True, inplace=True)
        return gdf

    def filter_grid_by_nodes(self, grid: gpd.GeoDataFrame) -> gpd.GeoDataFrame:
        """
        Removes squares from the grid that does not contain any nodes
        :param grid: Grid GeoDataFrame
        :return: Grid GeoDataFrame with only squares that contain nodes
        """
        nodes = self.graph.nodes[STD_GEOMETRY].tolist()
        contains_node = grid[STD_GEOMETRY].apply(lambda x: any(x.contains(node) for node in nodes))
        grid.drop(index=contains_node[contains_node == False].index, inplace=True)
        grid.reset_index(drop=True, inplace=True)
        return grid

    def filter_key_sites(self, grid: gpd.GeoDataFrame, key_sites: gpd.GeoDataFrame) -> gpd.GeoDataFrame:
        """
        Removes key site points that are not within the bounds of grid
        :param grid: grid Polygon (square) GeoDataFrame
        :param key_sites: Points GeoDataFrame of key sites
        :return: key_sites GeoDataFrame with only points residing within the grid
        """
        squares = grid[STD_GEOMETRY].tolist()
        within_square = key_sites[STD_GEOMETRY].apply(lambda x: any(x.within(square) for square in squares))
        key_sites.drop(index=within_square[within_square == False].index, inplace=True)
        key_sites.reset_index(drop=True, inplace=True)
        return key_sites

    def filter_grid_by_key_sites(self, grid: gpd.GeoDataFrame, key_sites: gpd.GeoDataFrame) -> gpd.GeoDataFrame:
        """
        Removes squares of the grid that contains a key site
        :param grid: grid Polygon (square) GeoDataFrame
        :param key_sites: Points GeoDataFrame of key sites
        :return: grids geoDataFrame that do not have any key site points contained within it
        """
        key_sites = key_sites[STD_GEOMETRY].tolist()
        contains_key_site = grid[STD_GEOMETRY].apply(lambda x: any(x.contains(key_site) for key_site in key_sites))
        grid.drop(index=contains_key_site[contains_key_site == True].index, inplace=True)
        grid.reset_index(drop=True, inplace=True)
        return grid

    def _nearest_node(self, point: Point) -> str:
        """
        Returns the nearest node to point
        :param point: point as Shapely.Point
        :return: Node Id of nearest node
        """

        nodes = self.graph.nodes[STD_GEOMETRY].tolist()
        min_index = min(enumerate([point.distance(node) for node in nodes]), key=itemgetter(1))[0]
        return self.graph.nodes.loc[min_index, STD_NODE_ID]

    def assign_key_sites_to_nearest_nodes(self, key_sites: gpd.GeoDataFrame) -> gpd.GeoDataFrame:
        """
        Sets up new column in key_site GeoDataFrame stipulating the nearest node at each key site
        :param key_sites: GeoDataFrame of the key sites.
        :return: Updated key sites containing the nearest node per key site.
        """
        key_sites['nearest_node'] = key_sites[STD_GEOMETRY].apply(self._nearest_node)
        return key_sites
