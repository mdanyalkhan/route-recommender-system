from unittest import TestCase
from unittest.mock import Mock
from shapely.geometry import Point
import pandas as pd
import geopandas as gpd
import RoadGraph


class TestVulnerabilityAnalyser(TestCase):
    RoadGraph.StdRoadGraph = Mock()
    edges = Mock()
    net = Mock()
    nodes = Mock()
    road_graph = RoadGraph.StdRoadGraph(net, nodes, edges)
    road_graph.edges.total_bounds = [0, 0, 10000, 10000]

    def test_four_grid_squares_are_generated_based_on_bounds_of_edges_and_dimensions_of_grid_square(self):
        vuln_analyzer = RoadGraph.VulnerabilityAnalyser(self.road_graph)
        grid = vuln_analyzer.generate_square_grid(dimension_km=5)

        self.assertEqual(len(grid), 4)

    def test_two_grid_squares_are_filtered_out_from_GeoDataFrame_if_no_nodes_reside_within_these_squares(self):
        point_series = pd.Series([Point(2500, 2500), Point(7500, 7500)])

        def get_item(name):
            return point_series

        self.road_graph.nodes.__getitem__ = Mock(side_effect=get_item)

        vuln_analyzer = RoadGraph.VulnerabilityAnalyser(self.road_graph)
        grid = vuln_analyzer.generate_square_grid(dimension_km=5)
        grid = vuln_analyzer.filter_grid_by_nodes(grid)
        self.assertEqual(len(grid), 2)

    def test_removes_key_sites_that_are_not_located_within_grid(self):
        key_sites = pd.DataFrame({'geometry': [Point(2500, 2500), Point(10500, 15000), Point(1000, 2000)]})

        vuln_analyzer = RoadGraph.VulnerabilityAnalyser(self.road_graph)
        grid = vuln_analyzer.generate_square_grid(dimension_km=5)
        key_sites = vuln_analyzer.filter_key_sites(grid, key_sites)

        self.assertEqual(len(key_sites), 2)

    def test_removes_a_grid_square_if_it_contains_a_key_site(self):
        key_sites = pd.DataFrame({'geometry': [Point(2500, 2500)]})

        vuln_analyzer = RoadGraph.VulnerabilityAnalyser(self.road_graph)
        grid = vuln_analyzer.generate_square_grid(dimension_km=5)
        grid = vuln_analyzer.filter_grid_by_key_sites(grid, key_sites)

        self.assertEqual(len(grid), 3)

    def test_assigns_nearest_nodes_to_key_sites(self):
        key_sites = pd.DataFrame({'name': ['A', 'B', 'C'],
                                  'geometry': [Point(4000, 4000), Point(8000, 7000), Point(1000, 2000)]
                                  })
        key_sites = gpd.GeoDataFrame(key_sites, geometry='geometry'
                                     )
        nodes_df = pd.DataFrame({'node_id': ['N1', 'N2', 'N3'],
                                 'geometry': [Point(9000, 8000), Point(3000, 3000), Point(1212, 1500)]
                                 })

        nodes_gdf = gpd.GeoDataFrame(nodes_df, geometry='geometry')

        self.road_graph.nodes = nodes_gdf
        vuln_analyzer = RoadGraph.VulnerabilityAnalyser(self.road_graph)
        key_sites = vuln_analyzer.assign_key_sites_to_nearest_nodes(key_sites)

        self.assertListEqual(key_sites['nearest_node'].tolist(), ["N2", "N1", "N3"])
        self.assertListEqual(key_sites['geometry'].tolist(), [Point(3000, 3000), Point(9000, 8000), Point(1212, 1500)])

